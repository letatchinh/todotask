{"ast":null,"code":"/* eslint-disable prefer-rest-params */\nimport getTheme from './get-theme'; // Unpack custom variants, and get correct value for the current theme\n\nfunction themedVariants(variantProp, variants) {\n  return function (props) {\n    var theme = getTheme(props);\n\n    if (props && props[variantProp] && variants) {\n      var modes = variants[props[variantProp]];\n\n      if (modes && modes[theme.mode]) {\n        var value = modes[theme.mode];\n\n        if (value) {\n          return value;\n        } // TS believes value can be undefined\n\n      }\n    }\n\n    return '';\n  };\n}\n\nexport default function themed(modesOrVariant, variantModes) {\n  if (typeof modesOrVariant === 'string') {\n    return themedVariants(modesOrVariant, variantModes);\n  }\n\n  var modes = modesOrVariant;\n  return function (props) {\n    // Get theme from the user's props\n    var theme = getTheme(props); // User isn't required to provide both light and dark values\n\n    if (theme.mode in modes) {\n      var value = modes[theme.mode]; // TS believes value can be undefined\n\n      if (value) {\n        return value;\n      }\n    }\n\n    return '';\n  };\n}","map":{"version":3,"names":["getTheme","themedVariants","variantProp","variants","props","theme","modes","mode","value","themed","modesOrVariant","variantModes"],"sources":["/Users/royalsmr/Desktop/listtodo/node_modules/@atlaskit/button/node_modules/@atlaskit/theme/dist/esm/utils/themed.js"],"sourcesContent":["/* eslint-disable prefer-rest-params */\nimport getTheme from './get-theme';\n\n// Unpack custom variants, and get correct value for the current theme\nfunction themedVariants(variantProp, variants) {\n  return function (props) {\n    var theme = getTheme(props);\n\n    if (props && props[variantProp] && variants) {\n      var modes = variants[props[variantProp]];\n\n      if (modes && modes[theme.mode]) {\n        var value = modes[theme.mode];\n\n        if (value) {\n          return value;\n        } // TS believes value can be undefined\n\n      }\n    }\n\n    return '';\n  };\n}\n\nexport default function themed(modesOrVariant, variantModes) {\n  if (typeof modesOrVariant === 'string') {\n    return themedVariants(modesOrVariant, variantModes);\n  }\n\n  var modes = modesOrVariant;\n  return function (props) {\n    // Get theme from the user's props\n    var theme = getTheme(props); // User isn't required to provide both light and dark values\n\n    if (theme.mode in modes) {\n      var value = modes[theme.mode]; // TS believes value can be undefined\n\n      if (value) {\n        return value;\n      }\n    }\n\n    return '';\n  };\n}"],"mappings":"AAAA;AACA,OAAOA,QAAP,MAAqB,aAArB,C,CAEA;;AACA,SAASC,cAAT,CAAwBC,WAAxB,EAAqCC,QAArC,EAA+C;EAC7C,OAAO,UAAUC,KAAV,EAAiB;IACtB,IAAIC,KAAK,GAAGL,QAAQ,CAACI,KAAD,CAApB;;IAEA,IAAIA,KAAK,IAAIA,KAAK,CAACF,WAAD,CAAd,IAA+BC,QAAnC,EAA6C;MAC3C,IAAIG,KAAK,GAAGH,QAAQ,CAACC,KAAK,CAACF,WAAD,CAAN,CAApB;;MAEA,IAAII,KAAK,IAAIA,KAAK,CAACD,KAAK,CAACE,IAAP,CAAlB,EAAgC;QAC9B,IAAIC,KAAK,GAAGF,KAAK,CAACD,KAAK,CAACE,IAAP,CAAjB;;QAEA,IAAIC,KAAJ,EAAW;UACT,OAAOA,KAAP;QACD,CAL6B,CAK5B;;MAEH;IACF;;IAED,OAAO,EAAP;EACD,CAjBD;AAkBD;;AAED,eAAe,SAASC,MAAT,CAAgBC,cAAhB,EAAgCC,YAAhC,EAA8C;EAC3D,IAAI,OAAOD,cAAP,KAA0B,QAA9B,EAAwC;IACtC,OAAOT,cAAc,CAACS,cAAD,EAAiBC,YAAjB,CAArB;EACD;;EAED,IAAIL,KAAK,GAAGI,cAAZ;EACA,OAAO,UAAUN,KAAV,EAAiB;IACtB;IACA,IAAIC,KAAK,GAAGL,QAAQ,CAACI,KAAD,CAApB,CAFsB,CAEO;;IAE7B,IAAIC,KAAK,CAACE,IAAN,IAAcD,KAAlB,EAAyB;MACvB,IAAIE,KAAK,GAAGF,KAAK,CAACD,KAAK,CAACE,IAAP,CAAjB,CADuB,CACQ;;MAE/B,IAAIC,KAAJ,EAAW;QACT,OAAOA,KAAP;MACD;IACF;;IAED,OAAO,EAAP;EACD,CAbD;AAcD"},"metadata":{},"sourceType":"module"}