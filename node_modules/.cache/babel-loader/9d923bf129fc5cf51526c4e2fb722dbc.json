{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { useCallback } from 'react';\nimport { useAnalyticsEvents } from './useAnalyticsEvents';\nimport { useTrackedRef } from './useTrackedRef'; // WARNING: This hook will only function correctly for leaf node components - as in\n// no children inside the component will require analytics themselves.\n// Ignoring this warning will mean the analytics context of child components will not\n// include the context of this component, .e.g, lost data.\n// If you are going to have child components that require analytics use withAnalytics\n// or AnalyticsContext component instead.\n\nexport function usePlatformLeafSyntheticEventHandler(_ref) {\n  var fn = _ref.fn,\n      action = _ref.action,\n      componentName = _ref.componentName,\n      packageName = _ref.packageName,\n      packageVersion = _ref.packageVersion,\n      analyticsData = _ref.analyticsData;\n\n  var _useAnalyticsEvents = useAnalyticsEvents(),\n      createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent; // We put analyticsData and fn in a ref so that we don't need to break\n  // memoization.\n  // Generally these could be defined by consumers inline\n  // and so we do this to avoid breaking memoization of useCallback\n\n\n  var dataRef = useTrackedRef(analyticsData);\n  var fnRef = useTrackedRef(fn);\n  var handler = useCallback(function () {\n    var analyticsEvent = createAnalyticsEvent({\n      action: action,\n      actionSubject: componentName,\n      attributes: {\n        componentName: componentName,\n        packageName: packageName,\n        packageVersion: packageVersion\n      }\n    }); // To avoid wrapping this component in AnalyticsContext we manually\n    // push the parent context's meta data into the context.\n    // Note: this new 'context'\n\n    var context = _objectSpread({\n      componentName: componentName,\n      packageName: packageName,\n      packageVersion: packageVersion\n    }, dataRef.current);\n\n    analyticsEvent.context.push(context); // fire an event on the atlaskit channel\n\n    var clone = analyticsEvent.clone();\n\n    if (clone) {\n      clone.fire('atlaskit');\n    }\n\n    fnRef.current(analyticsEvent);\n  }, [// These are strings and won't change\n  action, componentName, packageName, packageVersion, // This function is memoized in the context\n  createAnalyticsEvent, // these are a stable ref because of the useTrackedRef hook\n  dataRef, fnRef]);\n  return handler;\n}","map":{"version":3,"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","useCallback","useAnalyticsEvents","useTrackedRef","usePlatformLeafSyntheticEventHandler","_ref","fn","action","componentName","packageName","packageVersion","analyticsData","_useAnalyticsEvents","createAnalyticsEvent","dataRef","fnRef","handler","analyticsEvent","actionSubject","attributes","context","current","clone","fire"],"sources":["/Users/royalsmr/Desktop/listtodo/node_modules/@atlaskit/textfield/node_modules/@atlaskit/analytics-next/dist/esm/hooks/usePlatformLeafSyntheticEventHandler.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useCallback } from 'react';\nimport { useAnalyticsEvents } from './useAnalyticsEvents';\nimport { useTrackedRef } from './useTrackedRef';\n// WARNING: This hook will only function correctly for leaf node components - as in\n// no children inside the component will require analytics themselves.\n// Ignoring this warning will mean the analytics context of child components will not\n// include the context of this component, .e.g, lost data.\n// If you are going to have child components that require analytics use withAnalytics\n// or AnalyticsContext component instead.\nexport function usePlatformLeafSyntheticEventHandler(_ref) {\n  var fn = _ref.fn,\n      action = _ref.action,\n      componentName = _ref.componentName,\n      packageName = _ref.packageName,\n      packageVersion = _ref.packageVersion,\n      analyticsData = _ref.analyticsData;\n\n  var _useAnalyticsEvents = useAnalyticsEvents(),\n      createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent; // We put analyticsData and fn in a ref so that we don't need to break\n  // memoization.\n  // Generally these could be defined by consumers inline\n  // and so we do this to avoid breaking memoization of useCallback\n\n\n  var dataRef = useTrackedRef(analyticsData);\n  var fnRef = useTrackedRef(fn);\n  var handler = useCallback(function () {\n    var analyticsEvent = createAnalyticsEvent({\n      action: action,\n      actionSubject: componentName,\n      attributes: {\n        componentName: componentName,\n        packageName: packageName,\n        packageVersion: packageVersion\n      }\n    }); // To avoid wrapping this component in AnalyticsContext we manually\n    // push the parent context's meta data into the context.\n    // Note: this new 'context'\n\n    var context = _objectSpread({\n      componentName: componentName,\n      packageName: packageName,\n      packageVersion: packageVersion\n    }, dataRef.current);\n\n    analyticsEvent.context.push(context); // fire an event on the atlaskit channel\n\n    var clone = analyticsEvent.clone();\n\n    if (clone) {\n      clone.fire('atlaskit');\n    }\n\n    fnRef.current(analyticsEvent);\n  }, [// These are strings and won't change\n  action, componentName, packageName, packageVersion, // This function is memoized in the context\n  createAnalyticsEvent, // these are a stable ref because of the useTrackedRef hook\n  dataRef, fnRef]);\n  return handler;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}