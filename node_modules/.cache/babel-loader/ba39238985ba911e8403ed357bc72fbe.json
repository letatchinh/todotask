{"ast":null,"code":"import React, { memo } from 'react';\nimport { background as bg } from '../colors';\nimport { DEFAULT_THEME_MODE } from '../constants'; // For forward-compat until everything is upgraded.\n\nimport useThemeResetStyles, { SELECTOR } from './hooks/use-theme-reset-styles';\nimport Theme from './theme';\nvar themeFnMap = {\n  dark: function dark() {\n    return {\n      mode: 'dark'\n    };\n  },\n  light: function light() {\n    return {\n      mode: 'light'\n    };\n  }\n};\n/**\n * __Atlaskit Theme Provider__\n *\n * The global theme provider is used to provide theme context to an application.\n * It should be used once in application code at the root, or as near to the root as possible,\n * to inject the global theme via React context.\n *\n * - [Examples](https://atlaskit.atlassian.com/examples/design-system/theme)\n *\n * @example\n * ```jsx\n * import { AtlaskitThemeProvider } from '@atlaskit/theme/components';\n *\n * const App = () => (\n *  <AtlaskitThemeProvider mode=\"dark\">\n *   <App />\n *  </AtlaskitThemeProvider>\n * );\n * ```\n */\n\nvar AtlaskitThemeProvider = /*#__PURE__*/memo(function (_ref) {\n  var _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? DEFAULT_THEME_MODE : _ref$mode,\n      _ref$background = _ref.background,\n      background = _ref$background === void 0 ? bg : _ref$background,\n      children = _ref.children; // background color is extracted here is it conditionally applied on the <body>\n\n  var themeObj = {\n    theme: {\n      mode: mode\n    }\n  };\n  var backgroundColor = background(themeObj);\n  useThemeResetStyles(backgroundColor);\n  return /*#__PURE__*/React.createElement(Theme.Provider, {\n    value: themeFnMap[mode]\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(mode, \"-\").concat(SELECTOR),\n    style: {\n      backgroundColor: backgroundColor\n    }\n  }, children));\n});\nexport default AtlaskitThemeProvider;","map":{"version":3,"names":["React","memo","background","bg","DEFAULT_THEME_MODE","useThemeResetStyles","SELECTOR","Theme","themeFnMap","dark","mode","light","AtlaskitThemeProvider","_ref","_ref$mode","_ref$background","children","themeObj","theme","backgroundColor","createElement","Provider","value","className","concat","style"],"sources":["/Users/royalsmr/Desktop/listtodo/node_modules/@atlaskit/button/node_modules/@atlaskit/theme/dist/esm/components/atlaskit-theme-provider.js"],"sourcesContent":["import React, { memo } from 'react';\nimport { background as bg } from '../colors';\nimport { DEFAULT_THEME_MODE } from '../constants';\n// For forward-compat until everything is upgraded.\nimport useThemeResetStyles, { SELECTOR } from './hooks/use-theme-reset-styles';\nimport Theme from './theme';\nvar themeFnMap = {\n  dark: function dark() {\n    return {\n      mode: 'dark'\n    };\n  },\n  light: function light() {\n    return {\n      mode: 'light'\n    };\n  }\n};\n/**\n * __Atlaskit Theme Provider__\n *\n * The global theme provider is used to provide theme context to an application.\n * It should be used once in application code at the root, or as near to the root as possible,\n * to inject the global theme via React context.\n *\n * - [Examples](https://atlaskit.atlassian.com/examples/design-system/theme)\n *\n * @example\n * ```jsx\n * import { AtlaskitThemeProvider } from '@atlaskit/theme/components';\n *\n * const App = () => (\n *  <AtlaskitThemeProvider mode=\"dark\">\n *   <App />\n *  </AtlaskitThemeProvider>\n * );\n * ```\n */\n\nvar AtlaskitThemeProvider = /*#__PURE__*/memo(function (_ref) {\n  var _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? DEFAULT_THEME_MODE : _ref$mode,\n      _ref$background = _ref.background,\n      background = _ref$background === void 0 ? bg : _ref$background,\n      children = _ref.children;\n  // background color is extracted here is it conditionally applied on the <body>\n  var themeObj = {\n    theme: {\n      mode: mode\n    }\n  };\n  var backgroundColor = background(themeObj);\n  useThemeResetStyles(backgroundColor);\n  return /*#__PURE__*/React.createElement(Theme.Provider, {\n    value: themeFnMap[mode]\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(mode, \"-\").concat(SELECTOR),\n    style: {\n      backgroundColor: backgroundColor\n    }\n  }, children));\n});\nexport default AtlaskitThemeProvider;"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,IAAhB,QAA4B,OAA5B;AACA,SAASC,UAAU,IAAIC,EAAvB,QAAiC,WAAjC;AACA,SAASC,kBAAT,QAAmC,cAAnC,C,CACA;;AACA,OAAOC,mBAAP,IAA8BC,QAA9B,QAA8C,gCAA9C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,IAAIC,UAAU,GAAG;EACfC,IAAI,EAAE,SAASA,IAAT,GAAgB;IACpB,OAAO;MACLC,IAAI,EAAE;IADD,CAAP;EAGD,CALc;EAMfC,KAAK,EAAE,SAASA,KAAT,GAAiB;IACtB,OAAO;MACLD,IAAI,EAAE;IADD,CAAP;EAGD;AAVc,CAAjB;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIE,qBAAqB,GAAG,aAAaX,IAAI,CAAC,UAAUY,IAAV,EAAgB;EAC5D,IAAIC,SAAS,GAAGD,IAAI,CAACH,IAArB;EAAA,IACIA,IAAI,GAAGI,SAAS,KAAK,KAAK,CAAnB,GAAuBV,kBAAvB,GAA4CU,SADvD;EAAA,IAEIC,eAAe,GAAGF,IAAI,CAACX,UAF3B;EAAA,IAGIA,UAAU,GAAGa,eAAe,KAAK,KAAK,CAAzB,GAA6BZ,EAA7B,GAAkCY,eAHnD;EAAA,IAIIC,QAAQ,GAAGH,IAAI,CAACG,QAJpB,CAD4D,CAM5D;;EACA,IAAIC,QAAQ,GAAG;IACbC,KAAK,EAAE;MACLR,IAAI,EAAEA;IADD;EADM,CAAf;EAKA,IAAIS,eAAe,GAAGjB,UAAU,CAACe,QAAD,CAAhC;EACAZ,mBAAmB,CAACc,eAAD,CAAnB;EACA,OAAO,aAAanB,KAAK,CAACoB,aAAN,CAAoBb,KAAK,CAACc,QAA1B,EAAoC;IACtDC,KAAK,EAAEd,UAAU,CAACE,IAAD;EADqC,CAApC,EAEjB,aAAaV,KAAK,CAACoB,aAAN,CAAoB,KAApB,EAA2B;IACzCG,SAAS,EAAE,GAAGC,MAAH,CAAUd,IAAV,EAAgB,GAAhB,EAAqBc,MAArB,CAA4BlB,QAA5B,CAD8B;IAEzCmB,KAAK,EAAE;MACLN,eAAe,EAAEA;IADZ;EAFkC,CAA3B,EAKbH,QALa,CAFI,CAApB;AAQD,CAtB4C,CAA7C;AAuBA,eAAeJ,qBAAf"},"metadata":{},"sourceType":"module"}